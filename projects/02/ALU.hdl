// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   
   //if (zx==1) this zeroes x, else x=x
   Mux16(a=x,   b=false,        sel=zx,     out=outZX);

   //if(nx==1), this negates x, else, x=x
   Not16(in=outZX,                          out=notOutZX);
   Mux16(a=outZX,   b=notOutZX, sel=nx,     out=outNX);

   //if(zy==1) y=0, else y=y
   Mux16(a=y,   b=false,        sel=zy,     out=outZY);

   //if(ny==1) y=!y else y=outZY
   Not16(in=outZY,                          out=notOutZY);
   Mux16(a=outZY,   b=notOutZY, sel=ny,     out=outNY);

   //if(f==1) out=outNX+outNY else out=outNX&outNY
   Add16(a=outNX,   b=outNY,                out=addXY);
   And16(a=outNX,   b=outNY,                out=andXY);
   Mux16(a=andXY,   b=addXY,    sel=f,      out=outF);

   //if(no==1) out=!out else out=out
   Not16(in=outF,                           out=notOutF);
   Mux16(a=outF,    b=notOutF,  sel=no,     out=final);

   //setting the output variable out
   Mux16(a=final,   b=false,    sel=false,  out=out);

   //setting the output variable zr
   Or16Way(in=final,                        out=outZR);
   Not(in=outZR,                            out=zr);

   //setting the output variable ng
   IsNeg(in=final,                          out=ng);
}